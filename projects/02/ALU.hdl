// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   Mux16(a=x, b=false, sel=zx, out=x1);

   Not16(in=x1, out=notx1);
   Mux16(a=x1, b=notx1, sel=nx, out=x2);

   Mux16(a=y, b=false, sel=zy, out=y1);

   Not16(in=y1, out=noty1);
   Mux16(a=y1, b=noty1, sel=ny, out=y2);

   Add16(a=x2, b=y2, out=out1);
   And16(a=x2, b=y2, out=out2);
   Mux16(a=out2, b=out1, sel=f, out=out3);
   Not16(in=out3, out=out4);
   Mux16(a=out3, b=out4, sel=no, out=out);
   Mux16(a=out3, b=out4, sel=no, out=outtest);

   And16(a=outtest, b=true, out[0]=outtest0);
   And16(a=outtest, b=true, out[1]=outtest1);
   And16(a=outtest, b=true, out[2]=outtest2);
   And16(a=outtest, b=true, out[3]=outtest3);
   And16(a=outtest, b=true, out[4]=outtest4);
   And16(a=outtest, b=true, out[5]=outtest5);
   And16(a=outtest, b=true, out[6]=outtest6);
   And16(a=outtest, b=true, out[7]=outtest7);
   And16(a=outtest, b=true, out[8]=outtest8);
   And16(a=outtest, b=true, out[9]=outtest9);
   And16(a=outtest, b=true, out[10]=outtest10);
   And16(a=outtest, b=true, out[11]=outtest11);
   And16(a=outtest, b=true, out[12]=outtest12);
   And16(a=outtest, b=true, out[13]=outtest13);
   And16(a=outtest, b=true, out[14]=outtest14);
   And16(a=outtest, b=true, out[15]=outtest15);
   Or(a=outtest0, b=outtest1, out=ot1);
   Or(a=ot1, b=outtest2, out=ot2);
   Or(a=ot2, b=outtest3, out=ot3);
   Or(a=ot3, b=outtest4, out=ot4);
   Or(a=ot4, b=outtest5, out=ot5);
   Or(a=ot5, b=outtest6, out=ot6);
   Or(a=ot6, b=outtest7, out=ot7);
   Or(a=ot7, b=outtest8, out=ot8);
   Or(a=ot8, b=outtest9, out=ot9);
   Or(a=ot9, b=outtest10, out=ot10);
   Or(a=ot10, b=outtest11, out=ot11);
   Or(a=ot11, b=outtest12, out=ot12);
   Or(a=ot12, b=outtest13, out=ot13);
   Or(a=ot13, b=outtest14, out=ot14);
   Or(a=ot14, b=outtest15, out=prezr);
   Not(in=prezr, out=zr);

   And16(a=outtest, b=true, out[15]=ng);
}
